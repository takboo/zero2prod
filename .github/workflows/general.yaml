name: Rust # Workflow name

on: [push, pull_request] # Triggers the workflow on push or pull request events

env:
  CARGO_TERM_COLOR: always # Ensures cargo output uses colors

jobs:
  test:
    name: Test # Job name for running tests
    runs-on: ubuntu-latest # Specifies the runner environment
    steps:
      - uses: actions/checkout@v3 # Checks-out your repository under $GITHUB_WORKSPACE
      - uses: dtolnay/rust-toolchain@stable # Installs the stable Rust toolchain
      - uses: Swatinem/rust-cache@v2 # Caches dependencies to speed up workflows
      - name: Run tests # Step name
        run: cargo test # Command to run tests

  fmt:
    name: Rustfmt # Job name for checking code formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt # Installs rustfmt component
      - name: Enforce formatting # Step name
        run: cargo fmt --check # Checks if the code is formatted according to rustfmt rules

  clippy:
    name: Clippy # Job name for running Clippy linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy # Installs clippy component
      - uses: Swatinem/rust-cache@v2
      - name: Linting # Step name
        run: cargo clippy -- -D warnings # Runs Clippy and treats all warnings as errors

  coverage:
    name: Code coverage # Job name for generating code coverage reports
    runs-on: ubuntu-latest # Base runner, but steps run in a container
    container:
      image: xd009642/tarpaulin # Specifies the Docker image to use for this job (pre-configured with tarpaulin)
      options: --security-opt seccomp=unconfined # Options for the Docker container, needed for tarpaulin to work correctly
    steps:
      - name: Checkout repository # Step name
        uses: actions/checkout@v3
      - name: Generate code coverage # Step name
        run: |
          cargo tarpaulin --verbose --workspace # Generates code coverage report for the entire workspace